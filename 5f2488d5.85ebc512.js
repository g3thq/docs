(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{118:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),c=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,b=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,d=p["".concat(b,".").concat(m)]||p[m]||u[m]||i;return a?r.a.createElement(d,l(l({ref:t},o),{},{components:a})):r.a.createElement(d,l({ref:t},o))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,b=new Array(i);b[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,b[1]=l;for(var o=2;o<i;o++)b[o]=a[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},119:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},120:function(e,t,a){"use strict";var n=a(0),r=a(121);t.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},121:function(e,t,a){"use strict";var n=a(0),r=Object(n.createContext)(void 0);t.a=r},122:function(e,t,a){"use strict";var n=a(0),r=a.n(n),i=a(120),b=a(119),l=a(53),s=a.n(l),o=37,c=39;t.a=function(e){var t=e.lazy,a=e.block,l=e.children,p=e.defaultValue,u=e.values,m=e.groupId,d=e.className,j=Object(i.a)(),O=j.tabGroupChoices,h=j.setTabGroupChoices,N=Object(n.useState)(p),g=N[0],y=N[1];if(null!=m){var f=O[m];null!=f&&f!==g&&u.some((function(e){return e.value===f}))&&y(f)}var v=function(e){y(e),null!=m&&h(m,e)},C=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(b.a)("tabs",{"tabs--block":a},d)},u.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(b.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case c:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case o:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(C,e.target,e)},onFocus:function(){return v(t)},onClick:function(){v(t)}},a)}))),t?Object(n.cloneElement)(l.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},l.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},123:function(e,t,a){"use strict";var n=a(3),r=a(0),i=a.n(r);t.a=function(e){var t=e.children,a=e.hidden,r=e.className;return i.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:a,className:r}),t)}},84:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return p}));var n=a(3),r=(a(0),a(118)),i=a(122),b=a(123);const l={id:"sdk",title:"Deta Base SDK"},s={unversionedId:"base/sdk",id:"base/sdk",isDocsHomePage:!1,title:"Deta Base SDK",description:"The Deta library is the easiest way to store and retrieve data from your Deta Base. Currently, we support JavaScript (Node + Browser), Python 3 and Go. Drop us a line if you want us to support your favorite language.",source:"@site/docs/base/sdk.md",slug:"/base/sdk",permalink:"/docs/base/sdk",editUrl:"https://github.com/g3thq/docs/tree/master/docs/base/sdk.md",version:"current"},o=[{value:"Installing",id:"installing",children:[]},{value:"Instantiating",id:"instantiating",children:[]},{value:"Using",id:"using",children:[{value:"Put",id:"put",children:[]},{value:"Get",id:"get",children:[]},{value:"Delete",id:"delete",children:[]},{value:"Insert",id:"insert",children:[]},{value:"Put Many",id:"put-many",children:[]},{value:"Update",id:"update",children:[]},{value:"Fetch",id:"fetch",children:[]}]},{value:"Contact",id:"contact",children:[]}],c={rightToc:o};function p({components:e,...t}){return Object(r.b)("wrapper",Object(n.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The Deta library is the easiest way to store and retrieve data from your Deta Base. Currently, we support JavaScript (Node + Browser), Python 3 and Go. ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#contact"}),"Drop us a line")," if you want us to support your favorite language."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},'A "Deta Base" instance is a collection of data, not unlike a Key-Value store, a MongoDB collection or a PostgreSQL/MySQL table. It will grow with your app\'s needs.'))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If your database keys have special characters (like ",Object(r.b)("inlineCode",{parentName:"p"},"&"),",",Object(r.b)("inlineCode",{parentName:"p"},"/"),", ",Object(r.b)("inlineCode",{parentName:"p"},"@"),", etc.) that are url-reserved or url-unsafe, please use the latest sdk version to prevent unexpected behavior."))),Object(r.b)("h2",{id:"installing"},"Installing"),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},"Using NPM:",Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"npm install deta\n")),Object(r.b)("p",null,"Using Yarn:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"yarn add deta\n"))),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"pip install deta\n"))),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"go get github.com/deta/deta-go\n")))),Object(r.b)("h2",{id:"instantiating"},"Instantiating"),Object(r.b)("p",null,"To start working with your Base, you need to import the ",Object(r.b)("inlineCode",{parentName:"p"},"Deta")," class and initialize it with a ",Object(r.b)("strong",{parentName:"p"},"Project Key"),". Then instantiate a subclass called ",Object(r.b)("inlineCode",{parentName:"p"},"Base")," with a database name of your choosing."),Object(r.b)("p",null,"Deta Bases are created for you automatically when you start using them."),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { Deta } = require('deta'); // import Deta\n\n// Initialize with a Project Key\nconst deta = Deta('project key'); \n\n// This how to connect to or create a database.\nconst db = deta.Base('simple_db'); \n\n// You can create as many as you want without additional charges.\nconst books = deta.Base('books'); \n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"  If you are using Deta Base within a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/micros/about"}),"Deta Micro"),", the ",Object(r.b)("strong",{parentName:"p"},"Deta SDK")," comes pre-installed and a valid project key is pre-set in the Micro's environment. There is no need to install the SDK or pass a key in the initialization step."),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { Deta } = require('deta');\n\nconst deta = Deta(); \n")))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"  If you are using the ",Object(r.b)("inlineCode",{parentName:"p"},"deta")," npm package of ",Object(r.b)("inlineCode",{parentName:"p"},"0.0.6")," or below, ",Object(r.b)("inlineCode",{parentName:"p"},"Deta")," is the single default export and should be imported as such."),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const Deta = require('deta');\n"))))),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'from deta import Deta  # Import Deta\n\n# Initialize with a Project Key\ndeta = Deta("project key")\n\n# This how to connect to or create a database.\ndb = deta.Base("simple_db")\n\n# You can create as many as you want without additional charges.\nbooks = deta.Base("books")\n\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"  If you are using Deta Base within a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/micros/about"}),"Deta Micro"),", the ",Object(r.b)("strong",{parentName:"p"},"Deta SDK")," comes pre-installed and a valid project key is pre-set in the Micro's environment. There is no need to install the SDK or pass a key in the the initialization step."),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"from deta import Deta\n\ndeta = Deta()\n"))))),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'import (\n  "fmt"\n  "github.com/deta/deta-go"\n)\n\nfunc main(){\n  // initialize with project key\n  // returns ErrBadProjectKey if project key is invalid\n  d, err := deta.New("project_key")\n  if err != nil {\n    fmt.Println("failed to init new Deta instance:", err)\n    return\n  }\n\n  // initialize with base name\n  // returns ErrBadBaseName if base name is invalid\n  db, err := d.NewBase("base_name")\n  if err != nil {\n    fmt.Println("failed to init new Base instance:", err)\n    return\n  }\n}\n')))),Object(r.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Your project key is confidential and meant to be used by you. Anyone who has your project key can access your database. Please, do not share it or commit it in your code."))),Object(r.b)("h2",{id:"using"},"Using"),Object(r.b)("p",null,"Deta's ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Base"))," class offers the following methods to interact with your Deta Base:"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#put"}),Object(r.b)("strong",{parentName:"a"},Object(r.b)("inlineCode",{parentName:"strong"},"put")))," \u2013 Stores an item in the database. It will update an item if the key already exists."),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#insert"}),Object(r.b)("strong",{parentName:"a"},Object(r.b)("inlineCode",{parentName:"strong"},"insert")))," \u2013 Stores an item in the database but raises an error if the key already exists. (2x slower than ",Object(r.b)("inlineCode",{parentName:"p"},"put"),")."),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#get"}),Object(r.b)("strong",{parentName:"a"},Object(r.b)("inlineCode",{parentName:"strong"},"get")))," \u2013 Retrieves an item from the database by its key."),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#fetch"}),Object(r.b)("strong",{parentName:"a"},Object(r.b)("inlineCode",{parentName:"strong"},"fetch")))," \u2013 Retrieves multiple items from the database based on the provided (optional) filters. "),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#delete"}),Object(r.b)("strong",{parentName:"a"},Object(r.b)("inlineCode",{parentName:"strong"},"delete")))," \u2013 Deletes an item from the database."),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#update"}),Object(r.b)("strong",{parentName:"a"},Object(r.b)("inlineCode",{parentName:"strong"},"update")))," \u2013 Updates an item in the database."),Object(r.b)("h3",{id:"put"},"Put"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"put")," is the fastest way to store an item in the database."),Object(r.b)("p",null,"In the case you do not provide us with a key, we will auto generate a 12 char long string as a key."),Object(r.b)("p",null,"You can also use ",Object(r.b)("inlineCode",{parentName:"p"},"put")," when you want to update an item in the database."),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async put(data, key=null)"))),Object(r.b)("h4",{id:"parameters"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"data")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"object")," (serializable), ",Object(r.b)("inlineCode",{parentName:"li"},"string"),", ",Object(r.b)("inlineCode",{parentName:"li"},"number"),", ",Object(r.b)("inlineCode",{parentName:"li"},"boolean")," and ",Object(r.b)("inlineCode",{parentName:"li"},"array"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: The data to be stored."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (optional) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"string")," and ",Object(r.b)("inlineCode",{parentName:"li"},"null"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description:  the key (aka ID) to store the data under. Will be auto generated if not provided.")))),Object(r.b)("h4",{id:"code-example"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const Deta = require(\'deta\');\n\nconst deta = Deta("project key");\nconst db = deta.Base("simple_db");\n\n// you can store objects\ndb.put({name: "alex", age: 77})  // A key will be automatically generated\ndb.put({name: "alex", age: 77}, "one")  // We will use "one" as a key\ndb.put({name: "alex", age: 77, key:"one"})  // The key could also be included in the object itself\n\n// or store simple types:\ndb.put("hello, worlds")\ndb.put(7)\ndb.put("success", "smart_work") // "success" is the value and "smart_work" is the key.\ndb.put(["a", "b", "c"], "my_abc")\n')),Object(r.b)("h4",{id:"returns"},"Returns"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"put")," returns a promise which resolves to the item on a successful put, otherwise it throws an Error.")),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"put(data: typing.Union[dict, list, str, int, float, bool], key:str = None):"))),Object(r.b)("h4",{id:"parameters-1"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"data")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"dict"),", ",Object(r.b)("inlineCode",{parentName:"li"},"str"),", ",Object(r.b)("inlineCode",{parentName:"li"},"int"),", ",Object(r.b)("inlineCode",{parentName:"li"},"float"),", ",Object(r.b)("inlineCode",{parentName:"li"},"bool")," and ",Object(r.b)("inlineCode",{parentName:"li"},"list"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: The data to be stored."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (optional) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"str")," and ",Object(r.b)("inlineCode",{parentName:"li"},"None"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description:  the key (aka ID) to store the data under. Will be auto generated if not provided.")))),Object(r.b)("h4",{id:"code-example-1"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'from deta import Deta\ndeta = Deta("project key")  \ndb = deta.Base("simple_db")\n\n# you can store objects\ndb.put({"name": "alex", "age": 77})  # A key will be automatically generated\ndb.put({"name": "alex", "age": 77}, "one")  # We will use "one" as a key\ndb.put({"name": "alex", "age": 77, "key": "one"})  # The key could also be included in the object itself\n\n# or store simple types:\ndb.put("hello, worlds")\ndb.put(7)\ndb.put("success", "smart_work")  # "success" is the value and "smart_work" is the key.\ndb.put(["a", "b", "c"], "my_abc")\n\n')),Object(r.b)("h4",{id:"returns-1"},"Returns"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"put")," returns the item on a successful put, otherwise it raises an error.")),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Put(item interface{}) (string, error)"))),Object(r.b)("h4",{id:"parameters-2"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"item")," : The item to be stored, should be a ",Object(r.b)("inlineCode",{parentName:"li"},"struct")," or a ",Object(r.b)("inlineCode",{parentName:"li"},"map"),". If the item is a ",Object(r.b)("inlineCode",{parentName:"li"},"struct")," provide the field keys for the data with json struct tags. The key of the item must have a json struct tag of ",Object(r.b)("inlineCode",{parentName:"li"},"key"),".")),Object(r.b)("h4",{id:"code-example-2"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'import (\n    "fmt"\n    "github.com/deta/deta-go"\n)\n\ntype User struct{\n    Key string `json:"key"` // json struct tag \'key\' used to denote the key\n    Username string `json:"username"`\n    Active bool `json:"active"`\n    Age int `json:"age"`\n    Likes []string `json:"likes"`\n}\n\nfunc main(){\n    // error ignored for brevity\n    d, _ := deta.New("project key")\n    db, _ := d.NewBase("users")\n\n    // a user\n    u := &User{\n        Key: "kasdlj1",\n        Username: "jimmy",\n        Active: true,\n        Age: 20,\n        Likes: []string{"ramen"},\n    }\n\n    // put item in the database\n    key, err := db.Put(u)\n    if err != nil {\n        fmt.Println("Failed to put item:", err)\n        return\n    }\n    fmt.Println("Successfully put item with key:", key)\n\n    // can also use a map\n    um := map[string]interface{}{\n      "key": "kasdlj1",\n      "username": "jimmy",\n      "active": true,\n      "age": 20,\n      "likes": []string{"ramen"},\n    }\n\n    key, err = db.Put(um)\n    if err != nil {\n        fmt.Println("Failed to put item:", err)\n        return\n    }\n    fmt.Println("Successfully put item with key:", key)\n}\n')),Object(r.b)("h4",{id:"returns-2"},"Returns"),Object(r.b)("p",null,"Returns the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," of the item stored and an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadItem")," : bad item, item is of unexpected type"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadRequest"),": item caused a bad request response from the server "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unuathorized"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h3",{id:"get"},"Get"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"get")," retrieves an item from the database by it's ",Object(r.b)("inlineCode",{parentName:"p"},"key"),"."),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async get(key)"))),Object(r.b)("h4",{id:"parameters-3"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"string"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: the key of which item is to be retrieved.")))),Object(r.b)("h4",{id:"code-example-3"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const item = await db.get('one'); // retrieving item with key \"one\"\n")),Object(r.b)("h4",{id:"returns-3"},"Returns"),Object(r.b)("p",null,"If the record is found, the promise resolves to:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"{\n  name: 'alex', age: 77, key: 'one'\n}\n")),Object(r.b)("p",null,"If not found, the promise will resolve to ",Object(r.b)("inlineCode",{parentName:"p"},"null"),".")),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"get(key: str)"))),Object(r.b)("h4",{id:"parameter-types"},"Parameter Types"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"str"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: the key of which item is to be retrieved.")))),Object(r.b)("h4",{id:"code-example-4"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'item = db.get("one") # retrieving item with key "one"\n')),Object(r.b)("h4",{id:"returns-4"},"Returns"),Object(r.b)("p",null,"If the record is found:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'{\n  "name": "alex", "age": 77, "key": "one"\n} \n')),Object(r.b)("p",null,"If not found, the function will return ",Object(r.b)("inlineCode",{parentName:"p"},"None"),".")),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Get(key string, dest interface{}) error"))),Object(r.b)("h4",{id:"parameters-4"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key"),": the key of the item to be retrieved"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"dest"),": the result will be stored into the value pointed by ",Object(r.b)("inlineCode",{parentName:"li"},"dest")," ")),Object(r.b)("h4",{id:"code-example-5"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'\nimport (\n    "fmt"\n    "github.com/deta/deta-go"\n)\n\ntype User struct{\n    Key string `json:"key"` // json struct tag \'key\' used to denote the key\n    Username string `json:"username"`\n    Active bool `json:"active"`\n    Age int `json:"age"`\n    Likes []string `json:"likes"`\n}\n\nfunc main(){\n    // error ignored for brevity\n    d, _ := deta.New("project key")\n    db, _ := d.NewBase("users")\n\n    // a variable to store the result \n    var u User \n    \n    // get item\n    // returns ErrNotFound if no item was found\n    err := db.Get("kasdlj1", &u)\n    if err != nil{\n        fmt.Println("Failed to get item:", err)\n    }\n}\n')),Object(r.b)("h4",{id:"returns-5"},"Returns"),Object(r.b)("p",null,"Returns an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrNotFound"),": no item with such key was found"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadDestination"),": bad destination, result could not be stored onto ",Object(r.b)("inlineCode",{parentName:"li"},"dest")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unauthorized "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h3",{id:"delete"},"Delete"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"delete")," deletes an item from the database that matches the key provided."),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async delete(key)"))),Object(r.b)("h4",{id:"parameters-5"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"string"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: the key of which item is to be deleted.")))),Object(r.b)("h4",{id:"code-example-6"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const res = await db.delete("one")\n')),Object(r.b)("h4",{id:"returns-6"},"Returns"),Object(r.b)("p",null,"Always returns a promise which resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", even if the key does not exist.")),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"delete(key: str)"))),Object(r.b)("h4",{id:"parameters-6"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"str"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: the key of the item that is to be deleted.")))),Object(r.b)("h4",{id:"code-example-7"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'res = db.delete("one")\n')),Object(r.b)("h4",{id:"returns-7"},"Returns"),Object(r.b)("p",null,"Always returns ",Object(r.b)("inlineCode",{parentName:"p"},"None"),", even if the key does not exist.")),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Delete(key string) error"))),Object(r.b)("h4",{id:"parameters-7"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key"),": the key of the item to be deleted")),Object(r.b)("h4",{id:"code-example-8"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'// delete item\n// returns a nil error if item was not found\nerr := db.Delete("dakjkfa")\nif err != nil {\n  fmt.Println("Failed to delete item:", err)\n}\n')),Object(r.b)("h4",{id:"returns-8"},"Returns"),Object(r.b)("p",null,"Returns an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". A ",Object(r.b)("inlineCode",{parentName:"p"},"nil")," error is returned if no item was found with provided ",Object(r.b)("inlineCode",{parentName:"p"},"key"),". Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unauthorized"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h3",{id:"insert"},"Insert"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"insert")," method inserts a single item into a ",Object(r.b)("strong",{parentName:"p"},"Base"),", but is unique from ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#put"}),Object(r.b)("inlineCode",{parentName:"a"},"put"))," in that it will raise an error of the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," already exists in the database."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"insert")," is roughly 2x slower than ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#put"}),Object(r.b)("inlineCode",{parentName:"a"},"put")),". "),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async insert(data, key=null)"))),Object(r.b)("h4",{id:"parameters-8"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"data")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"object")," (serializable), ",Object(r.b)("inlineCode",{parentName:"li"},"string"),", ",Object(r.b)("inlineCode",{parentName:"li"},"number"),", ",Object(r.b)("inlineCode",{parentName:"li"},"boolean")," and ",Object(r.b)("inlineCode",{parentName:"li"},"array"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: The data to be stored."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (optional) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"string")," and ",Object(r.b)("inlineCode",{parentName:"li"},"null"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description:  the key (aka ID) to store the data under. Will be auto generated if not provided.")))),Object(r.b)("h4",{id:"code-example-9"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// will succeed, a key will be auto-generated\nconst res1 = await db.insert('hello, world');\n\n// will succeed.\nconst res2 = await db.insert({message: 'hello, world'}, 'greeting1');\n\n// will raise an error as key \"greeting1\" already existed.\nconst res3 = await db.insert({message: 'hello, there'}, 'greeting1');\n")),Object(r.b)("h4",{id:"returns-9"},"Returns"),Object(r.b)("p",null,"Returns a promise which resolves to the item on a successful insert, and throws an error if the key already exists.")),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"insert(data: typing.Union[dict, list, str, int, float, bool], key:str = None):"))),Object(r.b)("h4",{id:"parameters-9"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"data")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"dict"),", ",Object(r.b)("inlineCode",{parentName:"li"},"str"),", ",Object(r.b)("inlineCode",{parentName:"li"},"int"),", ",Object(r.b)("inlineCode",{parentName:"li"},"float"),", ",Object(r.b)("inlineCode",{parentName:"li"},"bool")," and ",Object(r.b)("inlineCode",{parentName:"li"},"list"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: The data to be stored."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (optional) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"str")," and ",Object(r.b)("inlineCode",{parentName:"li"},"None"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description:  the key (aka ID) to store the data under. Will be auto generated if not provided.")))),Object(r.b)("h4",{id:"code-example-10"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'# will succeed, a key will be auto-generated\nres1 = db.insert("hello, world")\n\n# will succeed.\nres2 = db.insert({"message": "hello, world"}, "greeting1")\n\n# will raise an error as key "greeting1" already existed.\nres3 = db.insert({"message": "hello, there"}, "greeting1")\n')),Object(r.b)("h4",{id:"returns-10"},"Returns"),Object(r.b)("p",null,"Returns the item on a successful insert, and throws an error if the key already exists.")),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Insert(item interface{}) (string, error)"))),Object(r.b)("h4",{id:"parameters-10"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"item")," : similar to ",Object(r.b)("inlineCode",{parentName:"li"},"item")," parameter to ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#put"}),Object(r.b)("inlineCode",{parentName:"a"},"Put")))),Object(r.b)("h4",{id:"code-example-11"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'\nimport (\n    "fmt"\n    "github.com/deta/deta-go"\n)\n\ntype User struct{\n    Key string `json:"key"` // json struct tag \'key\' used to denote the key\n    Username string `json:"username"`\n    Active bool `json:"active"`\n    Age int `json:"age"`\n    Likes []string `json:"likes"`\n}\n\nfunc main(){\n    // error ignored for brevity\n    d, _ := deta.New("project key")\n    db, _ := d.NewBase("users")\n\n    // a user\n    u := &User{\n        Key: "kasdlj1",\n        Username: "jimmy",\n        Active: true,\n        Age: 20,\n        Likes: []string{"ramen"},\n    }\n\n    // insert item in the database\n    key, err := db.Insert(u)\n    if err != nil {\n        fmt.Println("Failed to insert item:", err)\n        return\n    }\n    fmt.Println("Successfully inserted item with key:", key)\n}\n')),Object(r.b)("h4",{id:"returns-11"},"Returns"),Object(r.b)("p",null,"Returns the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," of the item inserted and an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrConflict")," : if item with provided ",Object(r.b)("inlineCode",{parentName:"li"},"key")," already exists"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadItem"),": bad item, if item is of unexpected type"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadRequest"),": item caused a bad request response from the server"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unauthorized"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h3",{id:"put-many"},"Put Many"),Object(r.b)("p",null,"The Put Many method puts up to 25 items into a Base at once on a single call."),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async putMany(items)"))),Object(r.b)("h4",{id:"parameters-11"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"items")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"Array"),' of items, where each "item" can be an ',Object(r.b)("inlineCode",{parentName:"li"},"object")," (serializable), ",Object(r.b)("inlineCode",{parentName:"li"},"string"),", ",Object(r.b)("inlineCode",{parentName:"li"},"number"),", ",Object(r.b)("inlineCode",{parentName:"li"},"boolean")," or ",Object(r.b)("inlineCode",{parentName:"li"},"array"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: The list of items to be stored.")))),Object(r.b)("h4",{id:"code-example-12"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'\nconst res1 = await db.putMany([\n  {"name": "Beverly", "hometown": "Copernicus City", "key": "one"}, // key provided\n  "dude", // key auto-generated \n  ["Namask\u0101ra", "marhabaan", "hello", "yeoboseyo"] // key auto-generated \n]);\n\n')),Object(r.b)("h4",{id:"returns-12"},"Returns"),Object(r.b)("p",null,"Returns a promise which resolves to the put items on a successful insert, and throws an error if you attempt to put more than 25 items."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "processed": {\n        "items": [\n            {\n                "hometown": "Copernicus City",\n                "key": "one",\n                "name": "Beverly"\n            },\n            {\n                "key": "jyesxxlrezo0",\n                "value": "dude"\n            },\n            {\n                "key": "5feqybn7lb05",\n                "value": [\n                    "Namask\u0101ra",\n                    "hello",\n                    "marhabaan",\n                    "yeoboseyo"\n                ]\n            }\n        ]\n    }\n}\n'))),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"put_many(items):"))),Object(r.b)("h4",{id:"parameters-12"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"items")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"list"),' of items, where each "item" can be an ',Object(r.b)("inlineCode",{parentName:"li"},"dict")," (JSON serializable), ",Object(r.b)("inlineCode",{parentName:"li"},"str"),", ",Object(r.b)("inlineCode",{parentName:"li"},"int"),", ",Object(r.b)("inlineCode",{parentName:"li"},"bool"),", ",Object(r.b)("inlineCode",{parentName:"li"},"float")," or ",Object(r.b)("inlineCode",{parentName:"li"},"list"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: The list of items to be stored.")))),Object(r.b)("h4",{id:"code-example-13"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'res_one = db.put_many([\n  {"name": "Beverly", "hometown": "Copernicus City", "key": "one"}, // key provided\n  "dude", // key auto-generated \n  ["Namask\u0101ra", "marhabaan", "hello", "yeoboseyo"] // key auto-generated \n])\n')),Object(r.b)("h4",{id:"returns-13"},"Returns"),Object(r.b)("p",null,"Returns a promise which resolves to the put items on a successful insert, and raises an error if you attempt to put more than 25 items."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "processed": {\n        "items": [\n            {\n                "hometown": "Copernicus City",\n                "key": "one",\n                "name": "Beverly"\n            },\n            {\n                "key": "jyesxxlrezo0",\n                "value": "dude"\n            },\n            {\n                "key": "5feqybn7lb05",\n                "value": [\n                    "Namask\u0101ra",\n                    "hello",\n                    "marhabaan",\n                    "yeoboseyo"\n                ]\n            }\n        ]\n    }\n}\n'))),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"PutMany(items interface{}) ([]string, error)"))),Object(r.b)("h4",{id:"parameters-13"},"Parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"items"),": a slice of items, each item in the slice similar to the ",Object(r.b)("inlineCode",{parentName:"li"},"item")," parameter in ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#put"}),Object(r.b)("inlineCode",{parentName:"a"},"Put")))),Object(r.b)("h4",{id:"code-example-14"},"Code Example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'\nimport (\n    "fmt"\n    "github.com/deta/deta-go"\n)\n\ntype User struct{\n    Key string `json:"key"` // json struct tag \'key\' used to denote the key\n    Username string `json:"username"`\n    Active bool `json:"active"`\n    Age int `json:"age"`\n    Likes []string `json:"likes"`\n}\n\nfunc main(){\n    // error ignored for brevity\n    d, _ := deta.New("project key")\n    db, _ := d.NewBase("users")\n\n    // users\n    u1 := &User{\n        Key: "kasdlj1",\n        Username: "jimmy",\n        Active: true,\n        Age: 20,\n        Likes: []string{"ramen"},\n    }\n    u2 := &User{\n      Key: "askdjf",\n      Username: "joel",\n      Active: true,\n      Age: 23,\n      Likes: []string{"coffee"},\n    }\n    users := []*User{u1, u2}\n\n    // put items in the database\n    keys, err := db.PutMany(users)\n    if err != nil {\n        fmt.Println("Failed to put items:", err)\n        return\n    }\n    fmt.Println("Successfully put item with keys:", keys)\n}\n')),Object(r.b)("h4",{id:"returns-14"},"Returns"),Object(r.b)("p",null,"Returns the list of keys of the items stored and an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". In case of an error, none of the items are stored. Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrTooManyItems"),": if there are more than 25 items"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadItem"),": bad item/items, one or more item of unexpected type"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadRequest"),": one or more item caused a bad request response from the server "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unauthorized"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h3",{id:"update"},"Update"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"update")," updates an existing item from the database."),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async update(updates, key)"))),Object(r.b)("h4",{id:"parameters-14"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"updates")," (required) - Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"object")," (JSON serializable)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: a json object describing the updates on the item "))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"string"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: the key of the item to be updated.")))),Object(r.b)("h5",{id:"update-operations"},"Update operations"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Set")," : ",Object(r.b)("inlineCode",{parentName:"p"},"Set")," is practiced through normal key-value pairs. The operation changes the values of the attributes provided in the ",Object(r.b)("inlineCode",{parentName:"p"},"set")," object if the attribute already exists. If not, it adds the attribute to the item with the corresponding value.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Increment"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Increment")," incrementes the value of an attribute. The attribute's value ",Object(r.b)("em",{parentName:"p"},"must be a number"),". The util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.increment(value)")," should be used to increment the value. The ",Object(r.b)("em",{parentName:"p"},"default value is 1")," if not provided and it can also be negative.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Append"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Append")," appends to a list. The util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.append(value)")," should be used to append the value. The value can be a ",Object(r.b)("inlineCode",{parentName:"p"},"primitive type")," or an ",Object(r.b)("inlineCode",{parentName:"p"},"array"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Prepend"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Prepend")," prepends to a list. The util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.prepend(value)")," should be used to prepend the value. The value can be a ",Object(r.b)("inlineCode",{parentName:"p"},"primitive type")," or an ",Object(r.b)("inlineCode",{parentName:"p"},"array"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Trim"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Trim")," removes an attribute from the item, the util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.trim()")," should be used as the value of an attribute."))),Object(r.b)("h4",{id:"code-example-15"},"Code Example"),Object(r.b)("p",null,"Consider we have the following item in a base ",Object(r.b)("inlineCode",{parentName:"p"},"const users = deta.Base('users')"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "key": "user-a",\n  "username": "jimmy",\n  "profile": {\n    "age": 32,\n    "active": false,\n    "hometown": "pittsburgh" \n  },\n  "on_mobile": true,\n  "likes": ["anime"],\n  "purchases": 1\n}\n')),Object(r.b)("p",null,"Then the following update operation :"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const updates = {\n  "profile.age": 33, // set profile.age to 33\n  "profile.active": true, // set profile.active to true\n  "profile.email": "jimmy@deta.sh", // create a new attribute \'profile.email\'\n  "profile.hometown": users.util.trim(), // remove \'profile.hometown\'\n  "on_mobile": users.util.trim(), // remove \'on_mobile\'\n  "purchases": users.util.increment(2), // increment \'purchases\' by 2, default value is 1\n  "likes": users.util.append("ramen") // append \'ramen\' to \'likes\', also accepts an array \n}\n\nconst res = await db.update(updates, "user-a");\n')),Object(r.b)("p",null,"Results in the following item in the base:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "key": "user-a",\n  "username": "jimmy",\n  "profile": {\n    "age": 33,\n    "active": true,\n    "email": "jimmy@deta.sh"\n  },\n  "likes": ["anime", "ramen"],\n  "purchases": 3\n}\n')),Object(r.b)("h4",{id:"returns-15"},"Returns"),Object(r.b)("p",null,"If the item is updated, the promise resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"null"),". Otherwise, an error is raised.")),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"update(updates:dict, key:str)"))),Object(r.b)("h4",{id:"parameters-15"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"updates")," (required) - Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"dict")," (JSON serializable)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: a dict describing the updates on the item "))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key")," (required) \u2013 Accepts: ",Object(r.b)("inlineCode",{parentName:"li"},"string"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description: the key of the item to be updated.")))),Object(r.b)("h5",{id:"update-operations-1"},"Update operations"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Set")," : ",Object(r.b)("inlineCode",{parentName:"p"},"Set")," is practiced through normal key-value pairs. The operation changes the values of the attributes provided in the ",Object(r.b)("inlineCode",{parentName:"p"},"set")," dict if the attribute already exists. If not, it adds the attribute to the item with the corresponding value.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Increment"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Increment")," incrementes the value of an attribute. The attribute's value ",Object(r.b)("em",{parentName:"p"},"must be a number"),". The util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.increment(value)")," should be used to increment the value. The ",Object(r.b)("em",{parentName:"p"},"default value is 1")," if not provided and it can also be negative.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Append"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Append")," appends to a list. The util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.append(value)")," should be used to append the value. The value can be a ",Object(r.b)("inlineCode",{parentName:"p"},"primitive type")," or a ",Object(r.b)("inlineCode",{parentName:"p"},"list"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Prepend"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Prepend")," prepends to a list. The util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.prepend(value)")," should be used to prepend the value. The value can be a ",Object(r.b)("inlineCode",{parentName:"p"},"primitive type")," or a ",Object(r.b)("inlineCode",{parentName:"p"},"list"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Trim"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Trim")," removes an attribute from the item, the util ",Object(r.b)("inlineCode",{parentName:"p"},"base.util.trim()")," should be used as the value of an attribute."))),Object(r.b)("h4",{id:"code-example-16"},"Code Example"),Object(r.b)("p",null,"Consider we have the following item in a base ",Object(r.b)("inlineCode",{parentName:"p"},"users = deta.Base('users')"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "key": "user-a",\n  "username": "jimmy",\n  "profile": {\n    "age": 32,\n    "active": false,\n    "hometown": "pittsburgh" \n  },\n  "on_mobile": true,\n  "likes": ["anime"],\n  "purchases": 1 \n}\n')),Object(r.b)("p",null,"Then the following update operation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'updates = {\n  "profile.age": 33,  # set profile.age to 33\n  "profile.active": True, # set profile.active to true\n  "profile.email": "jimmy@deta.sh", # create a new attribute \'profile.email\'\n  "profile.hometown": users.util.trim(), # remove \'profile.hometown\'\n  "on_mobile": users.util.trim(), # remove \'on_mobile\'\n  "purchases": users.util.increment(2), # increment by 2, default value is 1\n  "likes": users.util.append("ramen") # append \'ramen\' to \'likes\', also accepts a list \n}\n\ndb.update(updates, "user-a")\n')),Object(r.b)("p",null,"Results in the following item in the base:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "key": "user-a",\n  "username": "jimmy",\n  "profile": {\n    "age": 33,\n    "active": true,\n    "email": "jimmy@deta.sh"\n  },\n  "likes":["anime", "ramen"],\n  "purchases": 3\n}\n')),Object(r.b)("h4",{id:"returns-16"},"Returns"),Object(r.b)("p",null,"If the item is updated, returns ",Object(r.b)("inlineCode",{parentName:"p"},"None"),". Otherwise, an exception is raised.")),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Update(key stirng, updates Updates) error"))),Object(r.b)("h4",{id:"parameters-16"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"key"),": the key of the item to update"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"updates")," : updates applied to the item, is of type ",Object(r.b)("inlineCode",{parentName:"li"},"deta.Updates")," which is a ",Object(r.b)("inlineCode",{parentName:"li"},"map[string]interface{}"))),Object(r.b)("h5",{id:"update-operations-2"},"Update operations"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Set")," : ",Object(r.b)("inlineCode",{parentName:"p"},"Set")," is practiced through normal key-value pairs. The operation changes the values of the attributes provided if the attribute already exists. If not, it adds the attribute to the item with the corresponding value.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Increment"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Increment")," incrementes the value of an attribute. The attribute's value ",Object(r.b)("em",{parentName:"p"},"must be a number"),". The util ",Object(r.b)("inlineCode",{parentName:"p"},"Base.Util.Increment(value interface{})")," should be used to increment the value. The value can also be negative.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Append"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Append")," appends to a list. The util ",Object(r.b)("inlineCode",{parentName:"p"},"Base.Util.Append(value interface{})")," should be used to append the value. The value can be a slice.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Prepend"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Prepend")," prepends to a list. The util ",Object(r.b)("inlineCode",{parentName:"p"},"Base.Util.Prepend(value interface{})")," should be used to prepend the value. The value can be a slice.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Trim"),": ",Object(r.b)("inlineCode",{parentName:"p"},"Trim")," removes an attribute from the item, the util ",Object(r.b)("inlineCode",{parentName:"p"},"Base.Util.Trim()")," should be used as the value of an attribute."))),Object(r.b)("h4",{id:"code-example-17"},"Code Example"),Object(r.b)("p",null,"Consider we have the following item in a base ",Object(r.b)("inlineCode",{parentName:"p"},"users"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "key": "user-a",\n  "username": "jimmy",\n  "profile": {\n    "age": 32,\n    "active": false,\n    "hometown": "pittsburgh" \n  },\n  "on_mobile": true,\n  "likes": ["anime"],\n  "purchases": 1\n}\n')),Object(r.b)("p",null,"Then the following update operation :"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'// define the updates\nupdates := deta.Updates{\n  "profile.age": 33, // set profile.age to 33\n  "profile.active": true, // set profile.active to true\n  "profile.email": "jimmy@deta.sh", // create a new attribute \'profile.email\'\n  "profile.hometown": users.Util.Trim(), // remove \'profile.hometown\'\n  "on_mobile": users.Util.Trim(), // remove \'on_mobile\'\n  "purchases": users.Util.Increment(2), // increment \'purchases\' by 2 \n  "likes": users.Util.Append("ramen") // append \'ramen\' to \'likes\', also accepts a slice \n}\n\n// update\nerr := users.Util.Update("user-a", updates);\n')),Object(r.b)("p",null,"Results in the following item in the base:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "key": "user-a",\n  "username": "jimmy",\n  "profile": {\n    "age": 33,\n    "active": true,\n    "email": "jimmy@deta.sh"\n  },\n  "likes": ["anime", "ramen"],\n  "purchases": 3\n}\n')),Object(r.b)("h4",{id:"returns-17"},"Returns"),Object(r.b)("p",null,"Returns an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadRequest"),": the update operation caused a bad request response from the server"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unauthorized"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h3",{id:"fetch"},"Fetch"),Object(r.b)("p",null,"Fetch retrieves a list of items matching a query. It will retrieve everything if no query is provided."),Object(r.b)("p",null,"A query is composed of a single ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#queries"}),"query")," object or a list of ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#queries"}),"queries"),"."),Object(r.b)("p",null,"In the case of a list, the indvidual queries are OR'ed."),Object(r.b)("br",null),Object(r.b)(i.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"async fetch(query, pages=10, buffer=null)"))),Object(r.b)("h4",{id:"parameters-17"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"query"),": is a single ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#queries"}),"query object")," or list of queries. If omitted, you will get all the items in the database (up to 1mb)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"pages")," how many pages of items should be returned."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"buffer"),': the number of items which will be returned for each iteration (aka "page") on the return iterable. This is useful when your query is returning more than 1mb of data, so you could buffer the results in smaller chunks.')),Object(r.b)("h4",{id:"code-example-18"},"Code Example"),Object(r.b)("p",null,"For the examples, let's assume we have a ",Object(r.b)("strong",{parentName:"p"},"Base")," with the following data:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'\n[\n  {\n    "key": "key-1",\n    "name": "Wesley",\n    "age": 27,\n    "hometown": "San Francisco",\n  },\n  {\n    "key": "key-2",\n    "name": "Beverly",\n    "age": 51,\n    "hometown": "Copernicus City",\n  },\n  {\n    "key": "key-3",\n    "name": "Kevin Garnett",\n    "age": 43,\n    "hometown": "Greenville",\n  }\n]\n\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const {value: myFirstSet} = await db.fetch({"age?lt": 30}).next();\nconst {value: mySecondSet} = await db.fetch([\n  { "age?gt": 50 },\n  { "hometown": "Greenville" }\n]).next();\n')),Object(r.b)("p",null,"... will come back with following data:"),Object(r.b)("h5",{id:"myfirstset"},Object(r.b)("inlineCode",{parentName:"h5"},"myFirstSet"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "key": "key-1",\n    "name": "Wesley",\n    "age": 27,\n    "hometown": "San Francisco",\n  }\n]\n')),Object(r.b)("h5",{id:"mysecondset"},Object(r.b)("inlineCode",{parentName:"h5"},"mySecondSet"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "key": "key-2",\n    "name": "Beverly",\n    "age": 51,\n    "hometown": "Copernicus City",\n  },\n  {\n    "key": "key-3",\n    "name": "Kevin Garnett",\n    "age": 43,\n    "hometown": "Greenville",\n  },\n]\n')),Object(r.b)("h4",{id:"returns-18"},"Returns"),Object(r.b)("p",null,"A promise which resolves to a generator of objects that meet the ",Object(r.b)("inlineCode",{parentName:"p"},"query")," criteria."),Object(r.b)("p",null,"The total number of items will not exceed the defined using ",Object(r.b)("inlineCode",{parentName:"p"},"buffer")," and `pages. Max. number of items"),Object(r.b)("p",null,"Iterating through the generator yields arrays containing objects, each array of max length ",Object(r.b)("inlineCode",{parentName:"p"},"buffer"),"."),Object(r.b)("h4",{id:"example-using-buffer-pages"},"Example using buffer, pages"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const foo = async (myQuery, bar) => {\n\n  items = db.fetch(myQuery, 10, 20) // items is up to the limit length (10*20)\n\n  for await (const subArray of items) // each subArray is up to the buffer length, 20\n    bar(subArray)\n}\n"))),Object(r.b)(b.a,{value:"py",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"fetch(query=None, buffer=None, pages=10):"))),Object(r.b)("h4",{id:"parameters-18"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"query"),": is a single ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#queries"}),"query object (",Object(r.b)("inlineCode",{parentName:"a"},"dict"),")")," or list of queries. If omitted, you will get all the items in the database (up to 1mb)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"pages")," how many pages of items should be returned."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"buffer"),': the number of items which will be returned for each iteration (aka "page") on the return iterable. This is useful when your query is returning more 1mb of data, so you could buffer the results in smaller chunks.')),Object(r.b)("h4",{id:"code-example-19"},"Code Example"),Object(r.b)("p",null,"For the examples, let's assume we have a ",Object(r.b)("strong",{parentName:"p"},"Base")," with the following data:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'\n[\n  {\n    "key": "key-1",\n    "name": "Wesley",\n    "age": 27,\n    "hometown": "San Francisco",\n  },\n  {\n    "key": "key-2",\n    "name": "Beverly",\n    "age": 51,\n    "hometown": "Copernicus City",\n  },\n  {\n    "key": "key-3",\n    "name": "Kevin Garnett",\n    "age": 43,\n    "hometown": "Greenville",\n  }\n]\n\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'my_first_set = next(db.fetch({"age?lt": 30}))\nmy_second_set = next(db.fetch([{"age?gt": 50}, {"hometown": "Greenville"}]))\n')),Object(r.b)("p",null,"... will come back with following data:"),Object(r.b)("h5",{id:"my_first_set"},Object(r.b)("inlineCode",{parentName:"h5"},"my_first_set"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "key": "key-1",\n    "name": "Wesley",\n    "age": 27,\n    "hometown": "San Francisco",\n  }\n]\n')),Object(r.b)("h5",{id:"my_second_set"},Object(r.b)("inlineCode",{parentName:"h5"},"my_second_set"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "key": "key-2",\n    "name": "Beverly",\n    "age": 51,\n    "hometown": "Copernicus City",\n  },\n  {\n    "key": "key-3",\n    "name": "Kevin Garnett",\n    "age": 43,\n    "hometown": "Greenville",\n  },\n]\n')),Object(r.b)("h4",{id:"returns-19"},"Returns"),Object(r.b)("p",null,"A generator of objects that meet the ",Object(r.b)("inlineCode",{parentName:"p"},"query")," criteria."),Object(r.b)("p",null,"The total number of items will not exceed the defined using ",Object(r.b)("inlineCode",{parentName:"p"},"buffer")," and `pages. Max. number of items"),Object(r.b)("p",null,"Iterating through the generator yields lists containing objects, each list of max length ",Object(r.b)("inlineCode",{parentName:"p"},"buffer"),"."),Object(r.b)("h4",{id:"example-using-buffer-pages-1"},"Example using buffer, pages"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"def foo(my_query, bar):\n  items = db.fetch(my_query, pages=10, buffer=20) # items is up to the limit length (10*20)\n\n  for sub_list in items: # each sub_list is up to the buffer length, 10\n    bar(sub_list)\n"))),Object(r.b)(b.a,{value:"go",mdxType:"TabItem"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"Fetch(i *FetchInput) error"))),Object(r.b)("h4",{id:"parameters-19"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"i"),": is a pointer to a ",Object(r.b)("inlineCode",{parentName:"p"},"FetchInput")),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),"// FetchInput input to Fetch operation\ntype FetchInput struct {\n  // filters to apply to items\n  // A nil value applies no queries and fetches all items\n  Q Query\n  // the destination to store the results\n  Dest interface{}\n  // the maximum number of items to fetch\n  // value of 0 or less applies no limit\n  Limit int\n  // the last key evaluated in a paginated response\n  // leave empty if not a subsequent fetch request\n  LastKey string\n}  \n")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Q"),": fetch query, is of type ",Object(r.b)("inlineCode",{parentName:"li"},"deta.Query")," which is a ",Object(r.b)("inlineCode",{parentName:"li"},"[]map[string]interface{}")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Dest"),": the results will be stored into the value pointed by ",Object(r.b)("inlineCode",{parentName:"li"},"Dest")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Limit"),": the maximum number of items to fetch, value of ",Object(r.b)("inlineCode",{parentName:"li"},"0")," or less applies no limit"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"LastKey"),": the last key evaluated in a paginated response, leave empty if not a subsequent fetch request ")))),Object(r.b)("h4",{id:"code-example-20"},"Code Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'import (\n    "github.com/deta/deta-go"\n)\n\ntype User struct {\n    Key string `json:"key"`\n    Name string `json:"name"`\n    Age int `json:"age"`\n    Hometown string `json:"hometown"`\n}\n\nfunc main(){\n    // errors ignored for brevity\n    d, _ := deta.New("project key")\n    db, _ := deta.NewBase("users")\n\n    // query to get users with age less than 30\n    query := deta.Query{\n      {"age?lt": 50},\n    }\n    \n    // variabe to store the results\n    var results []*User\n\n    // fetch items\n    _, err := db.Fetch(&deta.FetchInput{\n      Q: query,\n      Dest: &results,\n    })\n    if err != nil {\n        fmt.Println("failed to fetch items:", err) \n    }\n}\n')),Object(r.b)("p",null,"... ",Object(r.b)("inlineCode",{parentName:"p"},"results")," will have the following data:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "key": "key-1",\n    "name": "Wesley",\n    "age": 27,\n    "hometown": "San Francisco",\n  },\n  {\n    "key": "key-3",\n    "name": "Kevin Garnett",\n    "age": 43,\n    "hometown": "Greenville",\n  },\n]\n')),Object(r.b)("h4",{id:"paginated-example"},"Paginated example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),'import (\n    "github.com/deta/deta-go"\n)\n\ntype User struct {\n    Key string `json:"key"`\n    Name string `json:"name"`\n    Age int `json:"age"`\n    Hometown string `json:"hometown"`\n}\n\nfunc main(){\n    // errors ignored for brevity\n    d, _ := deta.New("project key")\n    db, _ := deta.NewBase("users")\n\n    // query to get users with age less than 30\n    query := deta.Query{\n      {"age?lt": 50},\n    }\n    \n    // variabe to store the results\n    var results []*User\n\n    // variable to store the page\n    var page []*User\n\n    // fetch input \n    i := &deta.FetchInput{\n      Q: query,      \n      Dest: &page,\n      Limit: 1, // limit provided so each page will only have one item\n    } \n    \n    // fetch items\n    lastKey, err := db.Fetch(i)\n    if err != nil {\n        fmt.Println("failed to fetch items:", err) \n        return\n    }\n\n    // append page items to results\n    results = append(allResults, page...)\n\n    // get all pages\n    for lastKey != ""{\n      // provide the last key in the fetch input\n      i.LastKey = lastKey\n\n      // fetch\n      lastKey, err := db.Fetch(i)\n      if err != nil {\n          fmt.Println("failed to fetch items:", err)\n          return\n      }\n\n      // append page items to all results\n      results = append(allResults, page...)\n    }\n}\n')),Object(r.b)("h4",{id:"returns-20"},"Returns"),Object(r.b)("p",null,"Returns an ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". Possible error values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadDestination"),": bad destination, results could not be stored onto ",Object(r.b)("inlineCode",{parentName:"li"},"dest")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrBadRequest"),": the fetch request caused a bad request response from the server"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrUnauthorized"),": unauthorized"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ErrInternalServerError"),": internal server error")))),Object(r.b)("h4",{id:"queries"},"Queries"),Object(r.b)("p",null,"Queries are regular objects/dicts/maps with conventions for different operations."),Object(r.b)("h5",{id:"equal"},"Equal"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"age": 22, "name": "Beverly"}\n\n// hierarchical\n{"user.profile.age": 22, "user.profile.name": "Beverly"}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"fav_numbers": [2, 4, 8]}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"time": {"day": "Tuesday", "hour": "08:00"}}\n')),Object(r.b)("h5",{id:"not-equal"},"Not Equal"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.profile.age?ne": 22}\n')),Object(r.b)("h5",{id:"less-than"},"Less Than"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.profile.age?lt": 22}\n')),Object(r.b)("h5",{id:"greater-than"},"Greater Than"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.profile.age?gt": 22}\n')),Object(r.b)("h5",{id:"less-than-or-equal"},"Less Than or Equal"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.profile.age?lte": 22}\n')),Object(r.b)("h5",{id:"greater-than-or-equal"},"Greater Than or Equal"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.profile.age?gte": 22}\n')),Object(r.b)("h5",{id:"prefix"},"Prefix"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.id?pfx": "afdk"}\n')),Object(r.b)("h4",{id:"range"},"Range"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"user.age?r": [22, 30]}\n')),Object(r.b)("h4",{id:"contains"},"Contains"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  // if user email contains the substring @deta.sh\n  "user.email?contains": "@deta.sh" \n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  // if berlin is in a list of places lived \n  "user.places_lived_list?contains": "berlin"\n}\n')),Object(r.b)("h4",{id:"not-contains"},"Not Contains"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  // if user email does not contain @deta.sh\n  "user.email?not_contains": "@deta.sh" // \'user.email?!contains\' also valid\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  // if berlin is not in a list of places lived\n  "user.places_lived_list?not_contains": "berlin" // \'user.places_lived_list?!contains\' also valid\n}\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},Object(r.b)("inlineCode",{parentName:"p"},"?contains")," and ",Object(r.b)("inlineCode",{parentName:"p"},"?not_contains")," only works for a list of strings if checking for membership in a list; it does not apply to list of other data types. You can store your lists always as a list of strings if you want to check for membership."))),Object(r.b)("h2",{id:"contact"},"Contact"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"hello@deta.sh")))}p.isMDXComponent=!0}}]);