(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{118:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=r.a.createContext({}),p=function(e){var n=r.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(l,".").concat(d)]||b[d]||s[d]||o;return t?r.a.createElement(m,i(i({ref:n},u),{},{components:t})):r.a.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},119:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},120:function(e,n,t){"use strict";var a=t(0),r=t(121);n.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},121:function(e,n,t){"use strict";var a=t(0),r=Object(a.createContext)(void 0);n.a=r},122:function(e,n,t){"use strict";var a=t(0),r=t.n(a),o=t(120),l=t(119),i=t(53),c=t.n(i),u=37,p=39;n.a=function(e){var n=e.lazy,t=e.block,i=e.children,b=e.defaultValue,s=e.values,d=e.groupId,m=e.className,j=Object(o.a)(),h=j.tabGroupChoices,f=j.setTabGroupChoices,O=Object(a.useState)(b),g=O[0],v=O[1];if(null!=d){var y=h[d];null!=y&&y!==g&&s.some((function(e){return e.value===y}))&&v(y)}var N=function(e){v(e),null!=d&&f(d,e)},T=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},m)},s.map((function(e){var n=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===n,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return T.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case p:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case u:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(T,e.target,e)},onFocus:function(){return N(n)},onClick:function(){N(n)}},t)}))),n?Object(a.cloneElement)(i.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},i.map((function(e,n){return Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==g})}))))}},123:function(e,n,t){"use strict";var a=t(3),r=t(0),o=t.n(r);n.a=function(e){var n=e.children,t=e.hidden,r=e.className;return o.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:r}),n)}},97:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return b}));var a=t(3),r=(t(0),t(118)),o=t(122),l=t(123);const i={id:"run",title:"Run",sidebar_lable:"Run"},c={unversionedId:"micros/run",id:"micros/run",isDocsHomePage:!1,title:"Run",description:"Run from the CLI",source:"@site/docs/micros/run.md",slug:"/micros/run",permalink:"/docs/micros/run",editUrl:"https://github.com/g3thq/docs/tree/master/docs/micros/run.md",version:"current"},u=[{value:"Run from the CLI",id:"run-from-the-cli",children:[]},{value:"Events",id:"events",children:[]},{value:"Input",id:"input",children:[]},{value:"Actions",id:"actions",children:[]},{value:"Run and HTTP",id:"run-and-http",children:[]},{value:"Run and Cron",id:"run-and-cron",children:[]}],p={rightToc:u};function b({components:e,...n}){return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h3",{id:"run-from-the-cli"},"Run from the CLI"),Object(r.b)("p",null,"A Deta Micro can be run directly from the ",Object(r.b)("inlineCode",{parentName:"p"},"deta cli")," using the command ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../cli/commands#deta-run"}),"deta run")," with an input."),Object(r.b)("p",null,"In order to run a micro from the cli directly, the micro's code needs to define functions that will be run from the cli with the help of our library ",Object(r.b)("inlineCode",{parentName:"p"},"deta"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"deta")," library is pre-installed on a micro and can just be imported directly."),Object(r.b)(o.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { app } = require('deta');\n\n// define a function to run from the cli\n// the function must take an event as an argument\napp.lib.run(event => \"Welcome to Deta!\");\n\nmodule.exports = app;\n"))),Object(r.b)(l.a,{value:"python",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from deta import app\n\n# define a function to run from the cli\n# the function must take an event as an argument\n@app.lib.run()\ndef welcome(event):\n    return "Welcome to Deta!"\n')))),Object(r.b)("p",null,"With this code deployed on a micro, you can simply run "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ deta run\n")),Object(r.b)("p",null,"And see the following output:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'Response:\n    "Welcome to Deta!"\n')),Object(r.b)("h3",{id:"events"},"Events"),Object(r.b)("p",null,"A function that is triggered from the cli must take an ",Object(r.b)("inlineCode",{parentName:"p"},"event")," as the only argument."),Object(r.b)("p",null,"You can provide an input from the cli to the function which will be passed on as an ",Object(r.b)("inlineCode",{parentName:"p"},"event"),". It has four attributes:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"event.json"),": ",Object(r.b)("inlineCode",{parentName:"li"},"object")," provides the JSON payload"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"event.body"),": ",Object(r.b)("inlineCode",{parentName:"li"},"string")," provides the raw JSON payload "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"event.type"),": ",Object(r.b)("inlineCode",{parentName:"li"},"string")," type of an event, ",Object(r.b)("inlineCode",{parentName:"li"},"run")," when running from the cli"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"event.action"),": ",Object(r.b)("inlineCode",{parentName:"li"},"string")," the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#Actions"}),"action")," provided from the cli, defaults to an empty string   ")),Object(r.b)(o.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { app } = require('deta');\n\napp.lib.run(event => {\n    return {\n        // access input to your function with event.json\n        message: `hello ${event.json.name}!`\n    };\n});\n\nmodule.exports = app;\n"))),Object(r.b)(l.a,{value:"python",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from deta import app\n\n@app.lib.run()\ndef welcome(event):\n    return {\n        # access input to your function with event.json\n        "message": f"hello {event.json.get(\'name\')}!"\n    }\n')))),Object(r.b)("p",null,"With this code deployed on a micro, you can run"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ deta run -- --name deta\n")),Object(r.b)("p",null,"And should see the following output."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'Response:\n    {\n        "message": "hello deta!"\n    }\n')),Object(r.b)("h3",{id:"input"},"Input"),Object(r.b)("p",null,"The input to your function on a micro can be provided through the ",Object(r.b)("inlineCode",{parentName:"p"},"deta cli")," and accessed in the code from the ",Object(r.b)("inlineCode",{parentName:"p"},"event")," object. The input is a JSON object created from the arguments provided to the cli. "),Object(r.b)("p",null,"An ",Object(r.b)("em",{parentName:"p"},"important")," consideration is that the values in key-value pairs in the input are always either ",Object(r.b)("em",{parentName:"p"},"strings"),", ",Object(r.b)("em",{parentName:"p"},"list of strings")," or ",Object(r.b)("em",{parentName:"p"},"booleans"),". "),Object(r.b)("p",null,"Boolean flags are provided with a single dash, string arguments with double dash and if multiple values are provided for the same key, a list of strings will be provided. "),Object(r.b)("p",null,"For instance:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ deta run -- --name jimmy --age 33 --emails jimmy@deta.sh --emails jim@deta.sh -active\n")),Object(r.b)("p",null,"will provide the micro with the following input:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "name": "jimmy",\n    "age": "33", // notice \'33\' here is a string not an int\n    "emails": ["jimmy@deta.sh", "jim@deta.sh"],\n    "active": true\n}\n')),Object(r.b)("p",null,"You need to explicitly convert the string values to other types in your code if needed."),Object(r.b)("h3",{id:"actions"},"Actions"),Object(r.b)("p",null,"Actions help you run different functions based on an ",Object(r.b)("inlineCode",{parentName:"p"},"action")," that you define for the function."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"action")," defaults to an empty string if not provided."),Object(r.b)(o.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { app } = require('deta');\n\napp.lib.run(event => {\n    return {\n        message: `hello ${event.json.name}!`\n    };\n    // action 'hello'\n}, \"hello\");\n\napp.lib.run(event => {\n    return {\n        message: `good morning ${event.json.name}!`\n    };\n    // action 'greet'\n}, \"greet\");\n\nmodule.exports = app;\n"))),Object(r.b)(l.a,{value:"python",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from deta import app\n\n# action \'hello\'\n# the action does not need to have the same name as the function\n@app.lib.run(action="hello")\ndef welcome(event):\n    return {\n        "message": f"hello {event.json.get(\'name\')}!"\n    }\n\n# action \'greet\'\n@app.lib.run(action="greet")\ndef greet(event):\n    return {\n        "message": f"good morning {event.json.get(\'name\')}!"\n    }\n')))),Object(r.b)("p",null,"With this code deployed on a deta micro, if you run"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ deta run hello -- --name deta\n")),Object(r.b)("p",null,"where you tell the cli to run action ",Object(r.b)("inlineCode",{parentName:"p"},"hello")," with ",Object(r.b)("inlineCode",{parentName:"p"},'"name": "deta"')," as input. You should see the following output:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'Response:\n    {\n        "message": "hello deta!" \n    }\n')),Object(r.b)("p",null,"And if you do ",Object(r.b)("inlineCode",{parentName:"p"},"deta run")," with action ",Object(r.b)("inlineCode",{parentName:"p"},"greet")," "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ deta run greet -- --name deta\n")),Object(r.b)("p",null,"you should see the following output:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'Response:\n    {\n        "message": "good morning deta!" \n    }\n')),Object(r.b)("h3",{id:"run-and-http"},"Run and HTTP"),Object(r.b)("p",null,"You can combine both run and HTTP triggers in the same deta micro. For this you need to instantiate your app using the ",Object(r.b)("inlineCode",{parentName:"p"},"deta")," library that is pre-installed on a micro.   "),Object(r.b)(o.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { App } = require('deta');\nconst express = require('express');\n\nconst app = App(express());\n\n// triggered with an HTTP request\napp.get('/', async(req, res) => {\n    res.send('Hello deta, i am running with HTTP');\n});\n\n// triggered from the cli\napp.lib.run(event => {\n    return 'Hello deta, i am running from the cli';\n});\n\nmodule.exports = app;\n\n"))),Object(r.b)(l.a,{value:"python",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from deta import App\nfrom fastapi import FastAPI\n\napp = App(FastAPI())\n\n# triggered with an HTTP request\n@app.get("/")\ndef http():\n    return "Hello deta, i am running with HTTP"\n\n# triggered from the cli\n@app.lib.run()\ndef run(event):\n    return "Hello deta, i am running from the cli"\n')))),Object(r.b)("h3",{id:"run-and-cron"},"Run and Cron"),Object(r.b)("p",null,"You can use both run and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"./cron"}),"cron")," triggers in the same deta micro. You can also stack run and cron triggers for the same function."),Object(r.b)(o.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { app } = require('deta');\n\nconst sayHello = event => 'hello deta';\nconst printTime = event => `it is ${(new Date).toTimeString()}`;\n\napp.lib.run(sayHello);\n\n// stacking run and cron\napp.lib.run(printTime, 'time'); // action 'time'\napp.lib.cron(printTime);\n\nmodule.exports = app;\n"))),Object(r.b)(l.a,{value:"python",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from deta import app\nfrom datetime import datetime\n\n# only run\n@app.lib.run()\ndef say_hello(event):\n    return \"hello deta\"\n\n# stacking run and cron\n@app.lib.run(action='time') # action 'time'\n@app.lib.cron():\ndef print_time(event):\n    return f\"it is {datetime.now()}\" \n")))))}b.isMDXComponent=!0}}]);