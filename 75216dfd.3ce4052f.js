(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{120:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),i=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=i.a.createContext({}),s=function(e){var t=i.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},p=function(e){var t=s(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),p=s(a),m=n,u=p["".concat(r,".").concat(m)]||p[m]||d[m]||l;return a?i.a.createElement(u,b(b({ref:t},o),{},{components:a})):i.a.createElement(u,b({ref:t},o))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=m;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,r[1]=b;for(var o=2;o<l;o++)r[o]=a[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},121:function(e,t,a){"use strict";function n(e){var t,a,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(i&&(i+=" "),i+=a);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(i&&(i+=" "),i+=t);return i}},122:function(e,t,a){"use strict";var n=a(0),i=a(123);t.a=function(){var e=Object(n.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},123:function(e,t,a){"use strict";var n=a(0),i=Object(n.createContext)(void 0);t.a=i},124:function(e,t,a){"use strict";var n=a(0),i=a.n(n),l=a(122),r=a(121),b=a(53),c=a.n(b),o=37,s=39;t.a=function(e){var t=e.lazy,a=e.block,b=e.children,p=e.defaultValue,d=e.values,m=e.groupId,u=e.className,j=Object(l.a)(),O=j.tabGroupChoices,N=j.setTabGroupChoices,h=Object(n.useState)(p),f=h[0],v=h[1];if(null!=m){var g=O[m];null!=g&&g!==f&&d.some((function(e){return e.value===g}))&&v(g)}var y=function(e){v(e),null!=m&&N(m,e)},w=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":a},u)},d.map((function(e){var t=e.value,a=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===t,className:Object(r.a)("tabs__item",c.a.tabItem,{"tabs__item--active":f===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case s:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case o:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return y(t)},onClick:function(){y(t)}},a)}))),t?Object(n.cloneElement)(b.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},125:function(e,t,a){"use strict";var n=a(3),i=a(0),l=a.n(i);t.a=function(e){var t=e.children,a=e.hidden,i=e.className;return l.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:a,className:i}),t)}},89:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(3),i=a(7),l=(a(0),a(120)),r=a(124),b=a(125),c={id:"sdk",title:"Deta Drive SDK"},o={unversionedId:"drive/sdk",id:"drive/sdk",isDocsHomePage:!1,title:"Deta Drive SDK",description:"The Deta library is the easiest way to store and retrieve files from your Deta Drive. Currently, we support JavaScript, Typescript and Python 3. Drop us a line if you want us to support your favorite language.",source:"@site/docs/drive/sdk.md",slug:"/drive/sdk",permalink:"/docs/drive/sdk",editUrl:"https://github.com/g3thq/docs/tree/master/docs/drive/sdk.md",version:"current"},s=[{value:"Installing",id:"installing",children:[]},{value:"Instantiating",id:"instantiating",children:[]},{value:"Using",id:"using",children:[{value:"Put",id:"put",children:[]},{value:"Get",id:"get",children:[]},{value:"Delete",id:"delete",children:[]},{value:"Delete Many",id:"delete-many",children:[]},{value:"List",id:"list",children:[]}]}],p={rightToc:s};function d(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The Deta library is the easiest way to store and retrieve files from your Deta Drive. Currently, we support JavaScript, Typescript and Python 3. ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#contact"}),"Drop us a line")," if you want us to support your favorite language."),Object(l.b)("h2",{id:"installing"},"Installing"),Object(l.b)("br",null),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},"Using NPM:",Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"npm install deta\n")),Object(l.b)("p",null,"Using Yarn:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"yarn add deta\n"))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"pip install deta\n")))),Object(l.b)("h2",{id:"instantiating"},"Instantiating"),Object(l.b)("p",null,"To start working with your Drive, you need to import the ",Object(l.b)("inlineCode",{parentName:"p"},"Deta")," class and initialize it with a ",Object(l.b)("strong",{parentName:"p"},"Project Key"),". Then instantiate a subclass called ",Object(l.b)("inlineCode",{parentName:"p"},"Drive")," with a database name of your choosing."),Object(l.b)("br",null),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { Deta } = require('deta'); // import Deta\n\n// this also works\nimport { Deta } from 'deta';\n\n// Initialize with a Project Key\nconst deta = Deta('project key'); \n\n// You can create as many as you want \nconst photos = deta.Drive('photos'); \nconst docs = deta.Drive('docs'); \n")),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"  If you are using Deta Drive within a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/micros/about"}),"Deta Micro"),", you must include ",Object(l.b)("inlineCode",{parentName:"p"},"deta")," in your ",Object(l.b)("inlineCode",{parentName:"p"},"package.json")," file to install the lastest sdk version."),Object(l.b)("p",{parentName:"div"},"  A valid project key is pre-set in the Micro's environment. There is no need to pass a key in the initialization step."),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { Drive } = require('deta');\nconst drive = Drive('simple_drive'); \n")))),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"  If you are using the ",Object(l.b)("inlineCode",{parentName:"p"},"deta")," npm package of ",Object(l.b)("inlineCode",{parentName:"p"},"0.0.6")," or below, ",Object(l.b)("inlineCode",{parentName:"p"},"Deta")," is the sinlge default export and should be imported as such."),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const Deta = require('deta');\n"))))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'from deta import Deta  # Import Deta\n\n# Initialize with a Project Key\ndeta = Deta("project key")\n\n# This how to connect to or create a database.\ndrive = deta.Drive("simple_drive")\n\n# You can create as many as you want \nphotos = deta.Drive("photos")\ndocs = deta.Drive("docs")\n\n')),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"  If you are using Deta Drive within a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/micros/about"}),"Deta Micro"),", you must include ",Object(l.b)("inlineCode",{parentName:"p"},"deta")," in your ",Object(l.b)("inlineCode",{parentName:"p"},"requirements.txt")," file to install the lastest sdk version. "),Object(l.b)("p",{parentName:"div"},"  A valid project key is pre-set in the Micro's environment. There is no need to pass a key in the the initialization step."),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'from deta import Drive \n\ndrive = Drive("simple_drive")\n')))))),Object(l.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Your project key is confidential and meant to be used by you. Anyone who has your project key can access your database. Please, do not share it or commit it in your code."))),Object(l.b)("h2",{id:"using"},"Using"),Object(l.b)("p",null,"Deta's ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"Drive"))," offres the following methods to interact with your Deta Drive:"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#put"}),Object(l.b)("strong",{parentName:"a"},Object(l.b)("inlineCode",{parentName:"strong"},"put")))," - Stores a file to drive. It will overwrite the file if the file already exists."),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#get"}),Object(l.b)("strong",{parentName:"a"},Object(l.b)("inlineCode",{parentName:"strong"},"get")))," - Retreives a file from drive by the file name."),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#delete"}),Object(l.b)("strong",{parentName:"a"},Object(l.b)("inlineCode",{parentName:"strong"},"delete")))," - Deletes a file from drive."),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#list"}),Object(l.b)("strong",{parentName:"a"},Object(l.b)("inlineCode",{parentName:"strong"},"list")))," - Lists the file names in a drive."),Object(l.b)("h3",{id:"put"},"Put"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Put")," uploads and stores a file in a drive with a given ",Object(l.b)("inlineCode",{parentName:"p"},"name"),". It will overwrite the file if the file name already exists."),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"async put(name, options)"))),Object(l.b)("h4",{id:"parameters"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"name")," (required) - ",Object(l.b)("inlineCode",{parentName:"p"},"string")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The name of the file."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"options")," (required) - ",Object(l.b)("inlineCode",{parentName:"p"},"{data : string | Uint8Array | Buffer, path: string, contentType: string}")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: An object with three optional parameters.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"data")," - ",Object(l.b)("inlineCode",{parentName:"li"},"string")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Buffer"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: Either the data string or a buffer."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"path")," - ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The path of the file to be uploaded to drive."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"contentType")," - ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The content type of the file to be uploaded to drive. If the content type is not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"drive")," tries to figure out the content type from the ",Object(l.b)("inlineCode",{parentName:"li"},"name")," provided. It defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"application/octet-stream")," if the content type can not be figured out from the file name.")))))),Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"options")," must have at least and at most one of two properties ",Object(l.b)("inlineCode",{parentName:"p"},"data")," or ",Object(l.b)("inlineCode",{parentName:"p"},"path")," defined."))),Object(l.b)("h4",{id:"returns"},"Returns"),Object(l.b)("p",null,"Returns a promise which resolves to the name of the item on a successful ",Object(l.b)("inlineCode",{parentName:"p"},"put"),", otherwise, it throws an ",Object(l.b)("inlineCode",{parentName:"p"},"Error")," on error."),Object(l.b)("h4",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"drive.put('hello.txt', {data: \"Hello world\"});\ndrive.put('hello.txt', {data: \"Hello world\", contentType: 'text/plain'});\n\ndrive.put('hello.txt', {data: Buffer.from('Hello World'), contentType: 'text/plain'});\ndrive.put('hello.txt', {path: './my/file/path/file.txt'});\ndrive.put('hello.txt', {path: './my/file/path/file.txt', contentType: 'text/plain'}});\n"))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"put(name, data, *, path, content_type)"))),Object(l.b)("h4",{id:"parameters-1"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"name")," (required) - ",Object(l.b)("inlineCode",{parentName:"p"},"string")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The name of the file."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"data")," - ",Object(l.b)("inlineCode",{parentName:"p"},"string | bytes | io.TextIOBase | io.BufferedIOBase | io.RawIOBase")," "),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The data content of the file."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"path")," - ",Object(l.b)("inlineCode",{parentName:"p"},"string")," "),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The local path of the file to be uploaded to drive."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"content_type")," - ",Object(l.b)("inlineCode",{parentName:"p"},"string")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The content type of the file to be uploaded to drive. If the content type is not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"drive")," tries to figure out the content type from the ",Object(l.b)("inlineCode",{parentName:"li"},"name")," provided. It defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"application/octet-stream")," if the content type can not be figured out from the file name.")),Object(l.b)("p",{parentName:"li"},"At least and at most one of two args ",Object(l.b)("inlineCode",{parentName:"p"},"data")," or ",Object(l.b)("inlineCode",{parentName:"p"},"path")," must be provided. ",Object(l.b)("inlineCode",{parentName:"p"},"path")," and ",Object(l.b)("inlineCode",{parentName:"p"},"content_type")," must be provided with the key words."))),Object(l.b)("h4",{id:"returns-1"},"Returns"),Object(l.b)("p",null,"Returns the name of the file on a successful ",Object(l.b)("inlineCode",{parentName:"p"},"put"),", otherwise, raises an ",Object(l.b)("inlineCode",{parentName:"p"},"Exception")," on error."),Object(l.b)("h4",{id:"example-1"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"drive.put('hello.txt', 'Hello world')\ndrive.put(b'hello.txt', 'Hello world')\ndrive.put('hello.txt', content_type='text/plain')\n\nimport io\ndrive.put('hello.txt', io.StringIO('hello world'))\ndrive.put('hello.txt', io.BytesIO(b'hello world'))\n\nf = open('./hello.txt', 'r')\ndrive.put('hello.txt', f)\nf.close()\n\ndrive.put('hello.txt', path='./hello.txt')\n")))),Object(l.b)("h3",{id:"get"},"Get"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Get")," retreives a file from a drive by its name."),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"async get(name)"))),Object(l.b)("h4",{id:"parameters-2"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"name")," (required) - ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The ",Object(l.b)("inlineCode",{parentName:"li"},"name")," of the file to get.")))),Object(l.b)("h4",{id:"returns-2"},"Returns"),Object(l.b)("p",null,"Returns a promise that resolves to a ",Object(l.b)("inlineCode",{parentName:"p"},"blob")," of data if found, else ",Object(l.b)("inlineCode",{parentName:"p"},"null"),".\nThrows an ",Object(l.b)("inlineCode",{parentName:"p"},"Error")," on errors."),Object(l.b)("h4",{id:"example-2"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const buf = await drive.get('hello.txt');\n"))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"get(name)"))),Object(l.b)("h4",{id:"parameters-3"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"name")," (required) - ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The ",Object(l.b)("inlineCode",{parentName:"li"},"name")," of the file to get.")))),Object(l.b)("h4",{id:"returns-3"},"Returns"),Object(l.b)("p",null,"Returns a instance of a ",Object(l.b)("inlineCode",{parentName:"p"},"DriveStreamingBody")," class which has the following methods/properties."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"read(size=None)")," : Reads all or up to the next ",Object(l.b)("inlineCode",{parentName:"p"},"size")," bytes. Calling ",Object(l.b)("inlineCode",{parentName:"p"},"read")," after all the content has been read will return empty bytes.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"iter_chunks(chunk_size:int=1024)")," : Returns an iterator that yields chunks of bytes of ",Object(l.b)("inlineCode",{parentName:"p"},"chunk_size")," at a time.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"iter_lines(chunk_size:int=1024)")," : Returns an iterator that yields lines from the stream. Bytes of ",Object(l.b)("inlineCode",{parentName:"p"},"chunk_size")," at a time is read from the raw stream and lines are yielded from there. The line delimiter is always ",Object(l.b)("inlineCode",{parentName:"p"},"b'\\n'"),".")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"close()")," : Closes the stream.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"closed")," : Returns ",Object(l.b)("inlineCode",{parentName:"p"},"True")," if the stream has been closed."))),Object(l.b)("h4",{id:"example-3"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"hello = drive.get('hello.txt')\ncontent = hello.read()\nhello.close()\n\n# larger files\n# iterate chunks of size 4096 and save to disk\nlarge_file = drive.get('large_file.txt')\nwith open(\"large_file.txt\", \"wb+\") as f:\n  for chunk in large_file.iter_chunks(4096):\n      f.write(chunk)\n  large_file.close()\n")))),Object(l.b)("h3",{id:"delete"},"Delete"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Delete")," deletes a file from drive."),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"async delete(name)"))),Object(l.b)("h4",{id:"parameters-4"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"name")," (required) - ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The name of the file to delete ")))),Object(l.b)("h4",{id:"returns-4"},"Returns"),Object(l.b)("p",null,"Returns a promise that resolves to the ",Object(l.b)("inlineCode",{parentName:"p"},"name")," of the deleted file on successfull deletions, otherwise raises an ",Object(l.b)("inlineCode",{parentName:"p"},"Error")),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"If the file did not exist, the file is still returned as deleted."))),Object(l.b)("h4",{id:"example-4"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const deletedFile = await drive.delete("hello.txt");\n'))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"delete(name)"))),Object(l.b)("h4",{id:"parameters-5"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"name")," (required) - ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The name of the file to delete ")))),Object(l.b)("h4",{id:"returns-5"},"Returns"),Object(l.b)("p",null,"Returns the ",Object(l.b)("inlineCode",{parentName:"p"},"name")," of the deleted file on successful deletions, otherwise raises an ",Object(l.b)("inlineCode",{parentName:"p"},"Exception")),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"If the file did not exist, the file is still returned as deleted."))),Object(l.b)("h4",{id:"example-5"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'deleted_file = drive.delete("hello.txt") \n')))),Object(l.b)("h3",{id:"delete-many"},"Delete Many"),Object(l.b)("p",null,"Deletes multiple files (up to 1000) from a drive."),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"async deleteMany(names)"))),Object(l.b)("h4",{id:"parameters-6"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"names")," (required) - ",Object(l.b)("inlineCode",{parentName:"li"},"Array of string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"description: The names of the files to be deleted.")))),Object(l.b)("h4",{id:"returns-6"},"Returns"),Object(l.b)("p",null,"Returns a promise which resolves to an object with ",Object(l.b)("inlineCode",{parentName:"p"},"deleted")," and ",Object(l.b)("inlineCode",{parentName:"p"},"failed")," keys indicating deleted and failed file names."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'{\n  deleted : ["file1.txt", "file2.txt", ...],\n  failed: {\n    "file_3.txt": "reason for failure",\n  } \n}\n')),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"If a file did not exist, the file is still returned as deleted."))),Object(l.b)("h4",{id:"example-6"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const result = await drive.DeleteMany(["file1.txt", "file2.txt"]);\nconsole.log("deleted:", result.deleted)\nconsole.log("failed:", result.failed)\n'))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"delete_many(names)"))),Object(l.b)("h4",{id:"parameters-7"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"names")," (required): ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The names of the files to be deleted.")))),Object(l.b)("h4",{id:"returns-7"},"Returns"),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"dict")," with ",Object(l.b)("inlineCode",{parentName:"p"},"deleted")," and ",Object(l.b)("inlineCode",{parentName:"p"},"failed")," keys indicating deleted and failed file names."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'{\n  "deleted" : ["file1.txt", "file2.txt", ...],\n  "failed": {\n    "file_3.txt": "reason for failure"\n  } \n}\n')),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"If a file did not exist, the file is still returned as deleted."))),Object(l.b)("h4",{id:"example-7"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'result = drive.delete_many(["file1.txt", "file2.txt"]);\nprint("deleted:", result.get("deleted"))\nprint("failed:", result.get("failed"))\n')))),Object(l.b)("h3",{id:"list"},"List"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"List")," files in your drive."),Object(l.b)(r.a,{groupId:"preferred-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"js",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"async list(options)"))),Object(l.b)("h4",{id:"parameters-8"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"options")," (required) : ",Object(l.b)("inlineCode",{parentName:"li"},"{prefix: string, limit: number, last: string}"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: An object with three optional parameters.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"prefix"),": ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The prefix that file names must have. "))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"limit"),": ",Object(l.b)("inlineCode",{parentName:"li"},"number"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The maximum number of files names to be returned, defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"1000")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"last"),": ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The ",Object(l.b)("inlineCode",{parentName:"li"},"last")," name seen in a previous paginated result. Provide ",Object(l.b)("inlineCode",{parentName:"li"},"last")," to fetch further pages.")))))))),Object(l.b)("h4",{id:"returns-8"},"Returns"),Object(l.b)("p",null,"Returns a promise which resolves to an ",Object(l.b)("inlineCode",{parentName:"p"},"object")," with ",Object(l.b)("inlineCode",{parentName:"p"},"paging")," and ",Object(l.b)("inlineCode",{parentName:"p"},"names")," keys."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'{\n  names: ["file1.txt", "file2.txt", ...],\n  paging: {\n    size: 2,\n    last: "file_2.txt"\n  }\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"names"),": The names of the files"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"paging"),": Contains paging information. ",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"size")," : The number of files returned."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"last")," : The last name seen in the paginated response. Provide this value in subsequent api calls to fetch further pages. For the last page, ",Object(l.b)("inlineCode",{parentName:"li"},"last")," is not present in the response.")))),Object(l.b)("h4",{id:"example-8"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// get all files\nlet result = await drive.list();\nlet allFiles = result.names;\nlet last = result.paging.last;\n\nwhile (last){\n  // provide last from previus call\n  result = await drive.list({last:result.paging.last});\n\n  allFiles = allFiles.concat(result.names) \n\n  // update last\n  last = result.paging.last\n}\nconsole.log("all files:", allFiles)\n\nconst resultWithPrefix = await drive.list({prefix: "blog/"})\nconst resultWithLimit = await drive.list({limit: 100})\nconst resultWIthLimitAndPrefix = await drive.list({limit: 100, prefix:"blog/"})\n'))),Object(l.b)(b.a,{value:"py",mdxType:"TabItem"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"list(limit, prefix, last)"))),Object(l.b)("h4",{id:"parameters-9"},"Parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"limit"),": ",Object(l.b)("inlineCode",{parentName:"li"},"int"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The maximum number of files names to be returned, defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"1000")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"prefix"),": ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The prefix that file names must have. "))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"last"),": ",Object(l.b)("inlineCode",{parentName:"li"},"string"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Description: The ",Object(l.b)("inlineCode",{parentName:"li"},"last")," name seen in a previous paginated result. Provide ",Object(l.b)("inlineCode",{parentName:"li"},"last")," from previous response to fetch further pages.")))),Object(l.b)("h4",{id:"returns-9"},"Returns"),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"dict")," with ",Object(l.b)("inlineCode",{parentName:"p"},"paging")," and ",Object(l.b)("inlineCode",{parentName:"p"},"names")," keys."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'{\n  "names": ["file1.txt", "file2.txt", ...],\n  "paging": {\n    "size": 2,\n    "last": "file_2.txt"\n  }\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"names"),": The names of the files"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"paging"),": Contains paging information. ",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"size")," : The number of files returned."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"last")," : The last name seen in the paginated response. Provide this value in subsequent api calls to fetch further pages. For the last page, ",Object(l.b)("inlineCode",{parentName:"li"},"last")," is not present in the response.")))),Object(l.b)("h4",{id:"example-9"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'# get all files\nresult = drive.list()\nall_files = result.get("names")\nlast = result.get("paging").get("last")\n\nwhile (last){\n  # provide last from previous call\n  result = drive.list(last=last)\n\n  allFiles = allFiles.concat(result.names) \n\n  # update last\n  last = result.paging.last\n}\nprint("all files:", allFiles)\n\nres_with_prefix = drive.list(prefix="/blog")\nres_with_limit = drive.list(limit=100)\nres_with_prefix_limit = drive.list(prefix="/blog", limit=100)\n')))))}d.isMDXComponent=!0}}]);