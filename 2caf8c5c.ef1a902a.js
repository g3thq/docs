(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{120:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(c,".").concat(d)]||p[d]||b[d]||o;return n?a.a.createElement(m,s(s({ref:t},l),{},{components:n})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},121:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},122:function(e,t,n){"use strict";var r=n(0),a=n(123);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},123:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a},124:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(122),c=n(121),s=n(53),i=n.n(s),l=37,u=39;t.a=function(e){var t=e.lazy,n=e.block,s=e.children,p=e.defaultValue,b=e.values,d=e.groupId,m=e.className,j=Object(o.a)(),O=j.tabGroupChoices,f=j.setTabGroupChoices,g=Object(r.useState)(p),h=g[0],y=g[1];if(null!=d){var v=O[d];null!=v&&v!==h&&b.some((function(e){return e.value===v}))&&y(v)}var N=function(e){y(e),null!=d&&f(d,e)},w=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":n},m)},b.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===t,className:Object(c.a)("tabs__item",i.a.tabItem,{"tabs__item--active":h===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case u:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case l:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return N(t)},onClick:function(){N(t)}},n)}))),t?Object(r.cloneElement)(s.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},s.map((function(e,t){return Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},125:function(e,t,n){"use strict";var r=n(3),a=n(0),o=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return o.a.createElement("div",Object(r.a)({role:"tabpanel"},{hidden:n,className:a}),t)}},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(120)),c=(n(124),n(125),{id:"py_tutorial",title:"Python Tutorial"}),s={unversionedId:"base/py_tutorial",id:"base/py_tutorial",isDocsHomePage:!1,title:"Python Tutorial",description:"Building a Simple CRUD with Deta Base",source:"@site/docs/base/py_tutorial.md",slug:"/base/py_tutorial",permalink:"/docs/base/py_tutorial",editUrl:"https://github.com/g3thq/docs/tree/master/docs/base/py_tutorial.md",version:"current"},i=[{value:"Building a Simple CRUD with Deta Base",id:"building-a-simple-crud-with-deta-base",children:[{value:"Setup",id:"setup",children:[]},{value:"Creating Records",id:"creating-records",children:[]},{value:"Reading Records",id:"reading-records",children:[]},{value:"Updating Records",id:"updating-records",children:[]},{value:"Deleting Records",id:"deleting-records",children:[]}]}],l={rightToc:i};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"building-a-simple-crud-with-deta-base"},"Building a Simple CRUD with Deta Base"),Object(o.b)("h3",{id:"setup"},"Setup"),Object(o.b)("p",null,"Two dependencies are needed for this project, ",Object(o.b)("inlineCode",{parentName:"p"},"deta")," and ",Object(o.b)("inlineCode",{parentName:"p"},"flask"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"pip install deta flask\n")),Object(o.b)("p",null,"To configure the app, import the dependencies and instantiate your database."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),"from flask import Flask, request, jsonify\nfrom deta import Deta\n\n\ndeta = Deta('myProjectKey') # configure your Deta project\ndb = deta.Base('simpleDB')  # access your DB\napp = Flask(__name__)\n")),Object(o.b)("h3",{id:"creating-records"},"Creating Records"),Object(o.b)("p",null,"For our database we are going to store records of users under a unique ",Object(o.b)("inlineCode",{parentName:"p"},"key"),". Users can have three properties:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'{\n    "name": str,\n    "age": int,\n    "hometown": str\n}\n\n')),Object(o.b)("p",null,"We'll expose a function that creates user records to HTTP ",Object(o.b)("inlineCode",{parentName:"p"},"POST")," requests on the route ",Object(o.b)("inlineCode",{parentName:"p"},"/users"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'@app.route(\'/users\', methods=["POST"])\ndef create_user():\n    name = request.json.get("name")\n    age = request.json.get("age")\n    hometown = request.json.get("hometown")\n    \n    user = db.put({\n        "name": name,\n        "age": age,\n        "hometown": hometown\n    })\n\n    return jsonify(user, 201)\n')),Object(o.b)("h4",{id:"request"},"Request"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"POST")," a payload to the endpoint:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "name": "Beverly",\n    "age": 44,\n    "hometown": "Copernicus City"\n}\n')),Object(o.b)("h4",{id:"response"},"Response"),Object(o.b)("p",null,"Our server should respond with a status of ",Object(o.b)("inlineCode",{parentName:"p"},"201")," and a body of:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "key": "dl9e6w6859a9",\n    "name": "Beverly",\n    "age": 44,\n    "hometown": "Copernicus City"\n}\n')),Object(o.b)("h3",{id:"reading-records"},"Reading Records"),Object(o.b)("p",null,"To read records, we can simply use ",Object(o.b)("inlineCode",{parentName:"p"},"db.get(key)"),". "),Object(o.b)("p",null,"If we tie a ",Object(o.b)("inlineCode",{parentName:"p"},"GET")," request to the ",Object(o.b)("inlineCode",{parentName:"p"},"/users")," path with a param giving a user id (i.e. ",Object(o.b)("inlineCode",{parentName:"p"},"/users/dl9e6w6859a9"),"), we can return a record of the user over HTTP."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'@app.route("/users/<key>")\ndef get_user():\n    key = request.json.get("key")\n    user = db.get(key)\n    return user if user else jsonify({"error": "Not found"}, 404)\n')),Object(o.b)("p",null,"We could also use the ",Object(o.b)("inlineCode",{parentName:"p"},"db.fetch(query)")," method to return the same data:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'@app.route("/users/<key>")\ndef get_user():\n    key = request.json.get("key")\n    return list(db_user.fetch({\'key\': id}))\n')),Object(o.b)("h4",{id:"request-1"},"Request"),Object(o.b)("p",null,"Let's try reading the record we just created."),Object(o.b)("p",null,"Make a ",Object(o.b)("inlineCode",{parentName:"p"},"GET")," to the path (for example) ",Object(o.b)("inlineCode",{parentName:"p"},"/users/dl9e6w6859a9"),"."),Object(o.b)("h4",{id:"response-1"},"Response"),Object(o.b)("p",null,"The server should return the same record:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "key": "dl9e6w6859a9",\n    "name": "Beverly",\n    "age": 44,\n    "hometown": "Copernicus City"\n}\n')),Object(o.b)("h3",{id:"updating-records"},"Updating Records"),Object(o.b)("p",null,"To update records under a given ",Object(o.b)("inlineCode",{parentName:"p"},"key"),", we can use ",Object(o.b)("inlineCode",{parentName:"p"},"db.put()"),", which will replace the record under a given key."),Object(o.b)("p",null,"We can tie a ",Object(o.b)("inlineCode",{parentName:"p"},"PUT")," request to the path ",Object(o.b)("inlineCode",{parentName:"p"},"/users/{id}")," to update a given user record over HTTP."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-py"}),'@app.route("/users/<key>", methods=["PUT"])\ndef update_user():\n    user = db.put(request.json)\n    return user\n')),Object(o.b)("h4",{id:"request-2"},"Request"),Object(o.b)("p",null,"We can update the record by passing a ",Object(o.b)("inlineCode",{parentName:"p"},"PUT")," to the path ",Object(o.b)("inlineCode",{parentName:"p"},"/users/dl9e6w6859a9")," with the following payload:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "name": "Wesley",\n    "age": 24,\n    "hometown": "San Francisco"\n}\n')),Object(o.b)("h4",{id:"response-2"},"Response"),Object(o.b)("p",null,"Our server should respond with the new body of:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "key": "dl9e6w6859a9",\n    "name": "Wesley",\n    "age": 24,\n    "hometown": "San Francisco"\n}\n')),Object(o.b)("h3",{id:"deleting-records"},"Deleting Records"),Object(o.b)("p",null,"To delete records under a given ",Object(o.b)("inlineCode",{parentName:"p"},"key"),", we can use ",Object(o.b)("inlineCode",{parentName:"p"},"Base.delete(key)"),", which will remove the record under a given key."),Object(o.b)("p",null,"We can tie a ",Object(o.b)("inlineCode",{parentName:"p"},"DELETE")," request to the path ",Object(o.b)("inlineCode",{parentName:"p"},"/users/{id}")," to delete a given user record over HTTP."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'@app.route("/users/<key>", methods=["DELETE"])\ndef delete_user():\n    key = request.json.get("key")\n    db.delete(key)\n   return\n')),Object(o.b)("h4",{id:"request-3"},"Request"),Object(o.b)("p",null,"We can delete the record by passing a ",Object(o.b)("inlineCode",{parentName:"p"},"DELETE")," to the path ",Object(o.b)("inlineCode",{parentName:"p"},"/users/dl9e6w6859a9"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "name": "Wesley",\n    "age": 24,\n    "hometown": "San Francisco"\n}\n')),Object(o.b)("h4",{id:"response-3"},"Response"),Object(o.b)("p",null,"Our server should respond with:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "message": "deleted"\n}\n')))}u.isMDXComponent=!0}}]);